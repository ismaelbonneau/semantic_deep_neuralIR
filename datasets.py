##########################################################
#
# Fichier contenant les fonctions de chargement des documents d'une collection
#
# Ismael Bonneau
##########################################################

import numpy as np
import gensim
import random
import ast
import json
import os
import pickle
from os import listdir,sep
from os.path import isfile, join
from gensim.parsing.preprocessing import preprocess_string,remove_stopwords,strip_numeric, strip_tags, strip_punctuation, strip_short, strip_multiple_whitespaces
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import CountVectorizer
import codecs
from gensim.models.wrappers import FastText

EPS = 10e-7


import string
table = str.maketrans('', '', '!"#$%\'()*+,-./:;<=>?@[\\]^_`{|}~')

import krovetz
# Krovetz stemmer est un stemmer moins "destructif" que le porter.
# Viewing morphology as an inference process: https://dl.acm.org/citation.cfm?id=160718
ks = krovetz.PyKrovetzStemmer()

CUSTOM_FILTERS = [lambda x: x.lower(), strip_tags, strip_multiple_whitespaces, strip_punctuation, remove_stopwords, lambda x: ks.stem(x)]

def custom_tokenizer(s):
    return [w.translate(table) for w in preprocess_string(s, [lambda x: x.lower(), strip_tags, lambda x: strip_short(x, 2), remove_stopwords, lambda x: ks.stem(x)])]


class Dataset:

	def __init__(self):
		pass

class Robust04(Dataset):

	def __init__(self, intervals, model_wv, normalize=False):
		"""
		all_doc : dictionnaire de tout nos documents afin d'itérer dessus. 
		"""
		self.intervals = intervals
		self.normalize = normalize
		self.model_wv = model_wv

	def load_idf(self, idf_file):
		self.idf_values = pickle.load(open(idf_file, "rb"))

	def get_vocab(self):
		return self.model_wv.wv.vocab

	def get_query(self, key, affiche=True):
		if affiche:
			print("query: ",key," ",self.d_query[key])
		return self.d_query[key]

	def get_doc(self,key,affiche=True):
		if affiche:
			print("doc: ",key," ",self.docs[key])
		return self.docs[key]

	def get_relevance(self,q_id,affiche=True):
		if affiche: 
			print("query: ",q_id," ",self.paires[q_id]['relevant'])
		return self.paires[q_id]['relevant']

	def get_idf_vec(self, query):
		"""
		"""
		vec = np.ones(self.max_length_query)
		for i, queryterm in enumerate(query):
			if queryterm.lower() in self.idf_values: #forcer la mise en majuscules on sait jamais
				vec[i] = self.idf_values[queryterm.lower()]
			elif queryterm in self.idf_values:
				vec[i] = self.idf_values[queryterm]
		return vec


	def load_all_query(self, file_query="data/robust2004.txt"):
		"""
			On recupère toutes les querys qui sont ensuite sauvegardées dans un dictionnaire. 
		"""
		with open(file_query, "r") as f:
			self.d_query = ast.literal_eval(f.read())

		for k in self.d_query :
			self.d_query[k]= self.d_query[k][0] # On suppr les query langage naturel, et on garde que la query mot clé
		self.max_length_query =  np.max([len(self.d_query[q].split()) for q in self.d_query])
		print("query chargé")


	def load_all_docs(self):
		"""
			Charge tout les docs dans un dico. 
		"""
		self.docs = {}
		collections = ["FR94", "FT", "FBIS", "LATIMES"]
		for collection in collections:
			with open("data/robust2004"+collection+".json", "r") as f:
				self.docs.update(json.load(f))
		print("docs chargés")

	def load_relevance(self, file_rel="data/qrels.robust2004.txt"):
		"""
			Chargement du fichier des pertinences pour les requêtes. 
			Pour chaque paire query/doc on nous dit si pertinent ou non. 
		"""
		self.paires = {}
		with open(file_rel,"r") as f:
			for line in f :
				l = line.strip().split(' ')
				self.paires.setdefault(l[0],{})
				self.paires[l[0]].setdefault('relevant',[])
				self.paires[l[0]].setdefault('irrelevant',[])
				if l[-1]=='1':
					self.paires[l[0]]['relevant'].append(l[2])
				else:
					self.paires[l[0]]['irrelevant'].append(l[2])
		
		print("relevance chargé")

	def embedding_exist(self, term):
		if term in self.model_wv:
			return term
		elif term.upper() in self.model_wv:
			return term.upper()
		else:
			return False


	def hist(self, query, document):
		"""
		query: matrice (nbtermequery x vector_size)
		document: matrice (nbtermedocument x vector_size)
		"""
		cos = np.dot(query, document.T)
		cos = cos / (np.linalg.norm(query, axis=1)[:, None] + EPS)
		cos = cos / (np.linalg.norm(document, axis=1) + EPS)
		return np.apply_along_axis(lambda x: np.log(EPS + np.histogram(x, bins=self.intervals, range=(-1,1))[0]), 1, cos) #log de l'histogramme


	def prepare_data_forNN(self, test_size=0.2):
		"""
		"""

		#preparer les vecteurs d'idf des termes des requetes
		lol = [q for q in self.d_query.keys() if q in self.paires]
		query_idf = {}
		for id_requete in lol:
			query_idf[id_requete] = self.get_idf_vec(custom_tokenizer(self.d_query[id_requete]))
		pickle.dump(query_idf, open("saved_data/query_idf.pkl", "wb"))
		del query_idf

		print("nombre de requetes: %d." % len(lol))
		
		#pour chaque requête on va générer autant de paires relevant que irrelevant
		#on va créer autant de fichiers que de requêtes:
		#chaque fichier va contenir des matrices d'interraction, alternée exemple positif/exemple négatif.

		for id_requete in lol:
			#recuperer les mots dont on connait les embeddings dans la query
			query_embeddings = np.zeros((self.max_length_query, 300))
			i = 0
			for word in custom_tokenizer(self.d_query[id_requete]):
				if word in self.model_wv:
					query_embeddings[i] = self.model_wv[word]
					i += 1
			query_embeddings = np.array(query_embeddings)

			interractions = []

			for pos, neg in zip(self.paires[id_requete]["relevant"], self.paires[id_requete]["irrelevant"]):
				#lire le doc, la requete et creer l'histogramme d'interraction
				pos_embeddings = []
				for word in custom_tokenizer(self.docs[pos]['text']):
					if word in self.model_wv:
						pos_embeddings.append(self.model_wv[word])
				pos_embeddings = np.array(pos_embeddings)

				interractions.append(self.hist(query_embeddings, pos_embeddings)) #append le doc positif
				
				neg_embeddings = []
				for word in custom_tokenizer(self.docs[neg]['text']):
					if word in self.model_wv:
						neg_embeddings.append(self.model_wv[word])
				neg_embeddings = np.array(neg_embeddings)

				interractions.append(self.hist(query_embeddings, neg_embeddings)) #append le doc négatif

			np.save("saved_data/"+id_requete+"_interractions.npy", np.array(interractions))
		print("data completed")


	def prepare_data_reranking(self, bm25_query_results):
		"""

		"""
		# pré calcule les interractions sur les 2000 documents renvoyés par BM25 sur chaque requête
		# Processus LENT!! à exécuter une seule fois
		query_idf = pickle.load(open("saved_data/query_idf.pkl", "rb"))
		print("nombre de requetes: %d." % len(query_idf))

		for id_requete in query_idf:
			if id_requete != '634':
				query_embeddings = np.zeros((self.max_length_query, 300))
				i = 0
				for word in custom_tokenizer(self.d_query[id_requete]):
					if word in self.model_wv:
						query_embeddings[i] = self.model_wv[word]
						i += 1
				query_embeddings = np.array(query_embeddings)

				interractions = []
				for id_doc in bm25_query_results[id_requete]:
					document_embeddings = []
					for word in custom_tokenizer(self.docs[id_doc]['text']):
						if word in self.model_wv:
							document_embeddings.append(self.model_wv[word])
					document_embeddings = np.array(document_embeddings)
					interractions.append(self.hist(query_embeddings, document_embeddings))

				#sauvegarde les 2000 matrices d'interraction par requete
				np.save("data/bm25_robust/"+id_requete+"_interractions.npy", np.array(interractions))
				print('requete %s complete' % id_requete)
		print("data completed")


# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# @@////////////(/(/(//(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((/(//(/((/@@
# @@/(//(///(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((@@
# @@////((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((/*/#%%%%%%%%%%%(//(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((@@
# @@/(/(/(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((*#%%%%%%%%%#######%%%%%%%**(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((/@@
# @@///(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((*%%%%#########################%%%,/((((((((((((((((((((((((((((((((((((((((((((((((((((((((@@
# @@(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((*#%#################################%%%*((((((((((((((((((((((((((((((((((((((((((((((((((((((@@
# @@((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((%#######################################%%*((((((((((((((((((((((((((((((((((((((((((((((((((((@@
# @@((((((((((((((((((((((((((((((((((((((((((((((((((((((((/#%##(((######################################%%/((((((((((((((((((((((((((((((((((((((((((((((((((@@
# @@((((((((((((((((((((((((((((((((((((((((((((((((((((((((%#(((##########################################%%#(((((((((((((((((((((((((((((((((((((((((((((((((@@
# @@(((((((((((((((((((((((((((((((((((((((((((((((((((((,%%#(((#############################################%%*(((((((((((((((((((((((((((((((((((((((((((((((@@
# @@((((((((((((((((((((((((((((((((((((((((((((((((((((,%%(((((##############################################%%*((((((((((((((((((((((((((((((((((((((((((((((@@
# @@(((((((((((((((((((((((((((((((((((((((((((((((((((/%%(((((################################################%%,(((((((((((((((((((((((((((((((((((((((((((((@@
# @@(((((((((((((((((((((((((((((((((((((((((((((((((((/%((((((#################################################%%/((((((((((((((((((((((((((((((((((((((((((((@@
# @@(((((((((((((((((((((((((((((((((((((((((((((((((((%#((((((##################################################%%*(((((((((((((((((((((((((((((((((((((((((((@@
# @@((((((((((((((((((((((((((((((((((((((((((((((((((/%(((((((##################################################%%#(((((((((((((((((((((((((((((((((((((((((((@@
# @@((((((((((((((((((((((((((((((((((((((((((((((((((*(((((((((##################################################%%/((((((((((((((((((((((((((((((((((((((((((@@
# @@((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((##################################################%%*((((((((((((((((((((((((((((((((((((((((((@@
# @@(((((((((((((((((((((((((((((((((((((((((((((((((*#((((((((((#################################################%%*((((((((((((((((((((((((((((((((((((((((((@@
# @@(((((((((((((((((((((((((((((((((((((((((((((((((##((((((((((############################################((((((%/((((((((((((((((((((((((((((((((((((((((((@@
# @@(((((((((((((((((((((((((((((((((((((((((((((((((%%((((((((((############*//(############################((((((%(((((((((((((((((((((((((((((((((((((((((((@@
# @@((((((((((((((((((((((((((((((((((((((((((((****,#%/((((((((##########/,,,/*       ./(###################/(**,,((((((((((((((((((((((((((((((((((((((((((((@@
# @@((((((((((((((((((((((((((((((((((((((((((#/,..**(/,,((((((##########(((//*(((,**,,    .*(#######///*,     .,,.,*((((((((((((((((((((((((((((((((((((((((((@@
# @@(((((((((((((((((((((((((((((((((((((((((((#,,,(,/(#(((((((########################((***,**#####*,,  .  ...,,,,,/#(((((((((((((((((((((((((((((((((((((((((@@
# @@(((((((((((((((((((((((((((((((((((((((((#/#,*(((/((#((/(((#############//#(*(**,,,///**/(#####(*,,,*######((//%*#(((((((((((((((((((((((((((((((((((((((((@@
# @@(((((((((((((((((((((((((((((((((((((((((#/#,((#*,/(##(*(((##########(*, (% , ,*@&% ,**(((#####(*,*,,*,,..,**,%%(#(#((((((((((#((((((((((((((((((((((((((((@@
# @@(((((((((((((((((((((((((((((((((((((((((#/(/##***(*###,(((############/**//,.*(,,*//((##((#####*,.#&., * ,/(#(#((#(##(((((((((((((((((((((((((((((((((((@@
# @@((((((((((((((((((((((((((((((((((((#((((#(((#,,*#(####.(((################(((((//######(((#####/,,**((*(#(,,(**/####(#((##(#((((((((((((((((((((((((((((((@@
# @@(((((((((((((((((((((((((((((((((((((((#(##(((,(%#(####,((((############################(########*,*#*/*****/#**/########(##(((((((((((((((((((((((((((((((@@
# @@((((((((((((((((((((((((((((((((((((#(#(#(#(,##(/*(*##/,,((((###################################(**,*#####/**#/*#############(#(#((((((((((((((((((((((((((@@
# @@(((((((((((((((((((((((((((((((((((((((##(#*#*,(###,(#(../((((###################################(/,**########################(((###(((((((((((((((((((((((@@
# @@(((((((((((((((((((((((((((#((((((##(#(#####*##*/##/*(*.,*(((((########################((((######((,**/########(#################((#(((((((((((((((((((((((@@
# @@(((((((((((((((((((((((((((((#(#(#((((#######//###(/(#*,.,*(((((#####################/(###########(%**#####(##((/################(#((((((((((((((((((((((((@@
# @@(((((((((((((((((((((((((((((((#(###############,(####.,,,.*((((((###################(############(((/#######((((##################(#((((((((((((((((((((((@@
# @@(((((((((((((((((((((((((((((((###(##############(** #...,**,((((((##################*((.   /####(*/(*######((((%##################((((((((((((((((((((((((@@
# @@((((((((((((((((((((((((((((#((#((###############/***#.,,,,,,,((((((###################(/(##(///,/(/.,#####((((/###################(#((#(((((((((((((((((((@@
# @@((((((((((((((((((((((((((((((#(#################(**((.,,,.,,,,*((((((########################(*,,,*/((###((((((#######################(#((((((((((((((((((@@
# @@(((((((((((((((((((((((((#((((###################(*(#(...,,,,,,*,(((((((#####(#############(/###(//((((((((((((########################((((#(((((((((((((((@@
# @@(((((((((((((((((((((((((((((####################/*(##.....*,,*.,,,((((((((((#########/..,,*,...*,(((((((((((((%########################(((((((((((((((((((@@
# @@(((((((((((((((((((((((((((#(####################**(##/..,,,*,,..,,**/(((((((###**,*#%%(*////((//(/,,(((((((((/%#########################(#((((((((((((((((@@
# @@((((((((((((((((((((((#(((#######################**(##(.....,*.,,,*,,.*((((((/,*.....,,,*,.*/***,,,*( .*/(((((*##########################((((((((((((((((((@@
# @@(((((((((((((((((((((((((((#####################%**(###..,.,,....,,,,,,,,/(*.,.(#####(/((((/////(/*,,,.../((/.%######################(#####((((((((((((((((@@
# @@(((((((((((((((((((((#(((((##################%(.#**(###(.  ,.,,,,,.**,**,,*,.***####(,/####((/////**/((,.,*,.(%##############################((((((((((((((@@
# @@(((((((((((((((((((((((#####################(,.@&/*((##((*. ...,.,,*,,..,,**,*,########*.         /((((/*...*%##############################(((((((((((((((@@
# @@((((((((((((((((((((((((##################%*,.%&&&,((####(,*. ...,.,,.**.*,*,*/(########((*...,//((((((....,%############################(#((((((((((((((((@@
# @@(((((((((((((((((((((#(((((##############%.,,.@&&&(((######/*,,. .,.,..,*,.,.**/###############(((((((/..,/%################################(((((((((((((((@@
# @@(((((((((((((((((((((((#(##(#############,,,,.@&&&&,((######(**,,,  ...,,*.*,*.*/#(##(#########(((*/,*.. %###################################(((#((((((((((@@
# @@((((((((((((((((((((##(#((############%,,,,,,,*&&&&&*((######((*,,,,.. . ,,*,,,,,,,,((//######(*,.,....*%#################################(##(#((((((((((((@@
# @@(((((((((((((((((((((((((###########%.,,,,,,,,,%&&&&&*((#######/**,,,,..   ...,,,.*,,,/(//*(*(/,....,.,*%##################################((((((#(((((((((@@
# @@((((((((((((((((((((((((((########%.,,,,,,,,,,,,&&&&&&@*(#######///**,,,.,,.. ....,.,*,**,*,.,,......,,,,,..(%%##############################(###((((((((((@@
# @@((((((((((((((((((((((##(#######%.,,,,,,,,,,,,,,.@&&&&&&((#######(((/****,,.,,.  ........ .. ....   .,,,,,,,.,,,.*%%%####################(#((((((((((((((((@@
# @@(((((((((((((((((((((((#((######,,,,,,,,,,,,,,,,,.%&&&&&&&%(######((((((///*,,,,*,.,,,...      (#,   ,,,,,,,,,.,,,,,,. ,%%%##################((((((((((((((@@
# @@((((((((((((((((((#((((((###%/.,,,,,,*,,,,,,,,,,,,,&&&&&&&&&%/#####((((((((((**,,,,,,,,,,,,,  ((&/   ,,,,,,,,,,,.,,,,,,,,,,..(%%############(((#(((((((((((@@
# @@(((((((((((((((((((((((##%(.,,,,,,,,,,,,,,,,,,,,,,,,#&&&&&&&&&@*####(((((((((/((/**,,,***,, .((&&%   ,,,,,,**,,,,,.,,,,,,,,,,,,,,../%%#######(##(((((((((((@@
# @@((((((((((((((((((((((%%.,,,,,,,,,,,,,,,,,,,,,,,,,,,,#&&&&&&&&&&&(*#(((((((((((((/((/((*,, *(&&&&&   .,,,,,,,,,,,,,,.,,,,,,,,,,,,,,,,,. ,#&%#((((((((((((((@@
# @@(((((((((((((((((((%(.,,,,,,,,,,,,,*,,,,,,,,,,,,,,,,,,.&&&&&&&&&&&&&(/((((((((((((((((*,.,(#&&&&&@.   .,,,,,,,,,,,,,,,.,,,,,,,,,,,,,,,,,,,,,,..(%%#((((((((@@
# @@((((((((((((((((%#.,,,,,,,,,,,,,.,,,,,,,,,,,,,,,,,,,,,,.&&&&&&&&&&&&&&@*(((((((((((((*, (#&&&&&&&&,    .,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,.(%%#(((@@
# @@((((((((((((#%#.,,,,,,,,,,,,,,,*.,,,,,,,,,,,,,,,,,,,,,,,.@&&&&&&&&&&&&&&&@#*(((((((,. /&&&&&&&&&&&/     .,,,,,,,,,,*,,,,,.,,,,,,,,,,,,,,,,,,,,,,,,,,,,.,.%#@@
# @@((((((((((%#.,,,,,,,,,,,,,,,,,,,.,,,,,,,,,,,,,,,,,,,,,,,,.%&&&&&&&&&&&&&&&&&@%,/*,..&&&&&&&&&&&&&&(       ,,,,,,,,,,,,,,,,,.,,,,*,,,,,,*,,,,,,,,,,,,,,,.,..@@
# @@(((((((%(.,,,,,,,,,,*,,,,,,,,,,,.,,,,,,,,,,,,,,,,,,,,,,,,,,*&&&&&&&&&&&&&&&&&&&%@&&&&&&&&&&&&&&    .,  .,,,,,,,,,,,,,,,,,.,,,,,,,,,,*,,*,*,,,,,,,,,,.,,&@
# @@((((%(.,,,,,,,,,,,,,,,,,,,,,,,,,.,,,,,,,,,,,,,,,,,,,,,,,,,,,.&&&&&&&&&&&&&&&&&&/.,. *@&&&&&&&&&&&&(   .,,,,. ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, *,&@
# @@(%(.,,,,,,,,,,,,*,,,,,,,,,,,,,,,.,,,,,,,,,,,,,,,,,,,*,,*,,,,, &&&&&&&&&&&&&&&% ,,,...  &&&&&&&&&&&*   ,,,,,,,,.,,,,,,,,*,,,,,, ,,,,,,,,,,,,,,,,,,,,,,,,,,.,@@
# @@.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,.,,,*,,,,,,,,,,,,,,,,,,,,,,,,,.%&&&&&&&&&&&&( ,...,...  .@&&&&&&&&,, .,,,,,,,,,,,.,,,,,,,,,,..*,,,,,,,,,,,,,,,,,,,,,,,,,, ,@@
# @@,,,,,,,,,,,,,,,,,,,,,,*,,,,,,,,,,,,,,,*,,,,,,,,,,,,,,.,,,,,,,,,,/&&&&&&&&&&/.,,.,..,...  /*&&&&&&@./  ,,,*,,,,,,,,,,.,,,,,, ,*,,,,,,,,,,,,,,,,,,,,,,,,,,,.,&@
# @@,,,,,,,,,,,,,,,,,,,,,*,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,*@&&&&&& .....,..... .##,&&&&&@.#  ,,,,,,,,,,,,**,,,., ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, &@
# @@,,,,,,,,,,,,,,,,,,,,,,*,,,,,,,,,,,,,*,,,,,,,,,,,,,.,,,,,,,,,,,,,,, @&&&&&**( ..,,,......*%##%&&&&&.&  ,,,,,,,,,,,,,,,,,,,,,.,*,,,*,,,,,,,,,,,,,,,,,*,,,,,,.@@
# @@,,**,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,.,,,,,,,,,,,,,,,,, @&&/(#&* ...,. ...#&&&&@/&&&,&. ,,,,,,,,,,,,,,,,,,,,,,,,,..,,,,,,,(***#,,,,,,,,,,,,,,&@
# @@,,*,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,.   .,,,,,,,,,,,,*,,,,,,,,,,,,,,,, @&&*(&&&&@ ..,..,.,.@&&&&&*@#/&* .,,,,,,,,,,,,,,,,,,,,,,,,,,,,.,,,(%/%/%/,,,,,,,,*,,,,&@
# @@,,,,,,,,,,,,,,,,,,,,,*,,,,,,,,,,,,,,,.      .,.*,,,,,,,,,,,,,,,,,,,,, @,(&&&&&&.,,.,......&&&&&&**# .,,,,,,,,,,,,*,,,,*,,,,,,,,,,,,,,,(*(,&,,,,,,,,,,,,,,&@
# @@,,,,,,,,**,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,.,,,,,,,,,,,,,,,,,,,,*,,,, #&&&&&&&/,...,.,....@&&&&&&&&& .,,,,,,,,,,,,,,,,.,,,,,,,,,,,.,,,,,,,,,,,**(#((%%,,,,@@
# @@,,,,,,,,,,,,*,,,,,,,,,,,,,,,,,,,,,,,,,,,,,*.,,,,,,,,,,*,,,,,,,,,,,,,,,, @&&&&&&&..,....,.,..&&&&&&&&@  *,,,,,,,,,,,,,,,..,.,,,,,,*/*,*(@/,,@*,/&,*@*,,(&,,,&@
# @@,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,*.&&&&&&@.,.,,,.,.....&&&&&&&&. ,,,*,,,,,,,,,,,,,,,,,..(@,,@/,,(@*,,@*,/&,*@**%/,,,,&@
# @@,,,,,,,,,,,,,,,,,,,,,,,*,,,,,,,,,,,,,,,.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,*,,,,@&&&&&.........,.../&&&&&&&* ,,,,,,,,,,,,,,,,,,,,,,,,,*@,/,@*,,@*,/&,,@*,,,,,,,&@
# @@,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,*,,,,,,* *,,,,,,,,,,,,,,,,,,,,,,,,,,,*,,,,,, @&&&&/.,..,,..,....,&&&&& ,,,,,,,,*,,,,,,,,,,,,,*,,@/*/&*,@*,,@*,(&,(@%*,,,,.,&@
# @@,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,. ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,&&&&%..,.,..,,,....#&&&&&& ,,,,,,,,,,,,,,,,,,*,,,,,,*/,.#*((*,,,,,,,***,,,,,* ,&@
# @@,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,*  .,,,,,,,,,,,,,,,,,,,,,,,,,,,*,,,,,,*&&&@.........,.,...&&&&&@.,,,,,,,,,,,,,,,,,,,,,,,,,,(#/,*,(%(#/*,*%#(/#*,,,,. &@
# @@,,,,*,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,  ,,,,,,,,,,*,,,,,,,,,,,,*,,,,,,,,,,#&&&......,,..,.....@&&&@*.,,,,,,,,,,,,,,,,,,,,,,,,#((#*(&/,*#,(#(,,,,,,,,,.  @@
# @@,,,,,,,,,,,,,,,,,,,,,,,,*,,,,,,,,,,,,,,,,,,  ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,.*&&/.,..,..........,@&&.,,,,,,,,,,,,,,,,,,,,,,,,,, ,,,,,,,,,,,,,,,,,,,,*  .&@
# @@,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, .,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,.#&&.....,..........*&&&&.,,,,,,,,,,,,,,,,,,,,,,,,,, ,,,,,,,,,,,,,,,,,,,,,  ,&@
